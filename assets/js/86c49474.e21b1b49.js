"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2527],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={slug:"/SplashScreenLoadingData",title:"Splash screen & loading data \ud83d\udcbe"},i=void 0,l={unversionedId:"Guides/3_3_SplashScreenLoadingData",id:"Guides/3_3_SplashScreenLoadingData",title:"Splash screen & loading data \ud83d\udcbe",description:"In many applications, you need to load data from API before displaying any content.",source:"@site/docs/3_Guides/3_3_SplashScreenLoadingData.md",sourceDirName:"3_Guides",slug:"/SplashScreenLoadingData",permalink:"/react-native-boilerplate/docs/SplashScreenLoadingData",draft:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/3_Guides/3_3_SplashScreenLoadingData.md",tags:[],version:"current",frontMatter:{slug:"/SplashScreenLoadingData",title:"Splash screen & loading data \ud83d\udcbe"},sidebar:"tutorialSidebar",previous:{title:"Themes and darkMode \ud83c\udf17",permalink:"/react-native-boilerplate/docs/ThemesAndDarkMode"},next:{title:"Redux store \ud83d\uddc3\ufe0f",permalink:"/react-native-boilerplate/docs/ReduxStore"}},s={},c=[{value:"How the navigation is build \u2753",id:"how-the-navigation-is-build-",level:2},{value:"How to load data before app open \u2753",id:"how-to-load-data-before-app-open-",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In many applications, you need to load data from API before displaying any content.\nTo do that, we built a solid navigation based on a splash screen to load data before the content shows."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"how-the-navigation-is-build-"},"How the navigation is build \u2753"),(0,o.kt)("p",null,"The answer is :"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Like it's recommended in the React Navigation V5 documentation \ud83e\udd13")),(0,o.kt)("p",null,"Like everywhere else, the entry point of the navigation is in the root file :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},"const App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ApplicationNavigator />\n    </PersistGate>\n  </Provider>\n)\n")),(0,o.kt)("p",null,"Nothing new into the ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigators/Application")," component too :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const Stack = createStackNavigator()\n\n// @refresh reset\nconst ApplicationNavigator = () => {\n  const { Layout, darkMode, NavigationTheme } = useTheme()\n  const { colors } = NavigationTheme\n\n  return (\n    <SafeAreaView style={[Layout.fill, { backgroundColor: colors.card }]}>\n      <NavigationContainer theme={NavigationTheme} ref={navigationRef}>\n        <StatusBar barStyle={darkMode ? 'light-content' : 'dark-content'} />\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Startup\" component={StartupContainer} />\n          <Stack.Screen\n            name=\"Main\"\n            component={MainNavigator}\n            options={{\n              animationEnabled: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaView>\n  )\n}\n")),(0,o.kt)("p",null,"It just contains some requirement like the ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," for ios,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer")," bound with a ref to use utils contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"Navigators/utils")," "),(0,o.kt)("h2",{id:"how-to-load-data-before-app-open-"},"How to load data before app open \u2753"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"StartupContainer"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," function is where you can create asynchronous tasks like fetching data "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const init = async () => {\n  await setDefaultTheme({ theme: 'default', darkMode: null })\n  // Here you can add asynchronous/synchronous tasks\n  navigateAndSimpleReset('Main')\n}\n")),(0,o.kt)("p",null,"This function is called when the StartupContainer is mounted."))}u.isMDXComponent=!0}}]);